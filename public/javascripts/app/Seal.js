var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

define(['Phaser', './SealBoard'], function(Phaser, SealBoard) {
  var Seal;
  return Seal = (function(_super) {
    __extends(Seal, _super);

    Seal.preload = function(game) {
      var key, soundUrl, _ref, _results;
      game.load.spritesheet('RobbeClapRight', game.normalizeUrl('/Images/Robbe.png'), 520, 520, 17);
      game.load.spritesheet('RobbeBallRight', game.normalizeUrl('/Images/RobbeBall.png'), 520, 520, 18);
      game.load.spritesheet('RobbeClapLeft', game.normalizeUrl('/Images/Robbelinks.png'), 520, 520, 17);
      game.load.spritesheet('RobbeBallLeft', game.normalizeUrl('/Images/RobbeBallLinks.png'), 520, 520, 18);
      _ref = Seal.soundTypes;
      _results = [];
      for (key in _ref) {
        soundUrl = _ref[key];
        _results.push(game.load.audio(key, game.normalizeUrl(soundUrl), true));
      }
      return _results;
    };

    Seal.animationTypes = {
      CLAP: 10,
      BALL: 20,
      POFF: 30
    };

    Seal.soundTypes = {
      seal1: "sounds/seals/seal1.ogg",
      seal2: "sounds/seals/seal2.ogg",
      seal3: "sounds/seals/seal3.ogg",
      seal4: "sounds/seals/seal4.ogg",
      seal5: "sounds/seals/seal5.ogg",
      seal6: "sounds/seals/seal6.ogg",
      seal7: "sounds/seals/seal7.ogg",
      seal8: "sounds/seals/seal8.ogg",
      seal9: "sounds/seals/seal9.ogg",
      seal10: "sounds/seals/seal10.ogg",
      seal11: "sounds/seals/seal11.ogg"
    };

    Seal.sides = {
      LEFT: 10,
      RIGHT: 20
    };

    Seal.getSpriteNameBySide = function(side) {
      switch (side) {
        case Seal.sides.LEFT:
          return ['RobbeClapLeft', 'RobbeBallLeft'];
        case Seal.sides.RIGHT:
          return ['RobbeClapRight', 'RobbeClapRight'];
      }
    };

    Seal.getRandomAnimationType = function() {
      var key, list, value, _ref;
      list = [];
      _ref = Seal.animationTypes;
      for (key in _ref) {
        value = _ref[key];
        list.push(value);
      }
      return list[Math.floor(Math.random() * list.length)];
    };

    function Seal(game, parent, x, y, side) {
      var spriteNames;
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      if (side == null) {
        side = Seal.sides.LEFT;
      }
      this.setRandomPosition = __bind(this.setRandomPosition, this);
      this.changeSide = __bind(this.changeSide, this);
      this.playRandomSound = __bind(this.playRandomSound, this);
      this.playRandomAnimation = __bind(this.playRandomAnimation, this);
      this.syncPositions = __bind(this.syncPositions, this);
      this.setSize = __bind(this.setSize, this);
      this.getSide = __bind(this.getSide, this);
      this.setSide = __bind(this.setSide, this);
      this.setShow = __bind(this.setShow, this);
      Seal.__super__.constructor.call(this, game, parent, 'ROBBE_GROUP', true);
      spriteNames = Seal.getSpriteNameBySide(side);
      this.seal = this.create(x, y, spriteNames[0]);
      this.setSize(this.seal);
      this.seal.animations.add("clap", null, 11);
      this.seal_side = side;
      this.SAL_shown = false;
      this.sealBall = this.create(x, y, spriteNames[1]);
      this.setSize(this.sealBall);
      this.sealBall.visible = 0;
      this.sealBall.animations.add("ball", null, 11);
    }

    Seal.prototype.setShow = function() {
      return this.SAL_shown = true;
    };

    Seal.prototype.setSide = function(side) {
      return this.seal_side;
    };

    Seal.prototype.getSide = function() {
      return this.seal_side;
    };

    Seal.prototype.setSize = function(seal) {
      seal.anchor.setTo(0.5, 0.5);
      seal.x = (seal.getBounds().width - 200) * seal.anchor.x;
      seal.y = (seal.getBounds().height - 300) * seal.anchor.y * -1;
      return seal.scale.setTo(0.3, 0.3);
    };

    Seal.prototype.syncPositions = function(sealToShow, sealToHide) {
      sealToShow.y = sealToHide.y;
      sealToShow.x = sealToHide.x;
      sealToShow.visible = 1;
      return sealToHide.visible = 0;
    };

    Seal.prototype.playRandomAnimation = function() {
      var tween;
      switch (Seal.getRandomAnimationType()) {
        case Seal.animationTypes.BALL:
          this.syncPositions(this.sealBall, this.seal);
          tween = this.sealBall.play("ball");
          if (tween !== void 0) {
            tween.onComplete.add(function() {
              this.syncPositions(this.seal, this.sealBall);
              if (Math.random() < 0.5) {
                return this.playRandomAnimation();
              }
            }, this);
          }
          return tween;
        case Seal.animationTypes.CLAP:
          this.syncPositions(this.seal, this.sealBall);
          return this.seal.play("clap");
        case Seal.animationTypes.POFF:
          return this.playRandomAnimation();
      }
    };

    Seal.prototype.playRandomSound = function() {
      var sealSound, soundIndex, soundKey, sounds, value, _ref;
      sounds = [];
      _ref = Seal.soundTypes;
      for (soundKey in _ref) {
        value = _ref[soundKey];
        sounds.push(soundKey);
      }
      soundIndex = Math.floor(Math.random() * sounds.length);
      return sealSound = this.game.sound.play(sounds[soundIndex], Math.random() * 0.7, false);
    };

    Seal.prototype.changeSide = function(newSealBoard) {
      var bounds, delay, newX, newY, sealBoard, tween;
      if (!this.SAL_shown) {
        return;
      }
      sealBoard = newSealBoard;
      bounds = this.getBounds();
      if (this.getSide() === Seal.sides.LEFT) {
        newX = this.game.world.width - Math.random() * 200;
      } else if (this.getSide() === Seal.sides.RIGHT) {
        newX = Math.random() * 200;
      }
      newY = this.y;
      delay = Math.random();
      tween = this.game.add.tween(this).to({
        x: newX,
        y: newY
      }, 1000, Phaser.Easing.Quadratic.Out, true, delay);
      tween.onComplete.add(function() {
        var newSeal;
        if (this.game !== null) {
          newSeal = new Seal(sealBoard.game, sealBoard, 0, 0, sealBoard.getSide());
          newSeal.setRandomPosition(sealBoard.getRandomSeal());
          sealBoard.add(newSeal, false);
          return this.destroy();
        }
      }, this);
      return tween;
    };

    Seal.prototype.setRandomPosition = function(relatedSeal) {
      var newX, newY, relatedSealBounds;
      if (relatedSeal == null) {
        relatedSeal = null;
      }
      newX = 0;
      newY = 0;
      if (relatedSeal !== null) {
        relatedSealBounds = relatedSeal.getBounds();
        newX = relatedSeal.x + relatedSealBounds.width / 10;
        newY = relatedSeal.y;
        newX = newX + 20 + Math.floor(Math.random() * 150);
        newY = newY + 15 + Math.floor(Math.random() * 20);
      }
      this.x = newX;
      return this.y = newY;
    };

    return Seal;

  })(Phaser.Group);
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL1N0ZWZhbi9Eb3dubG9hZHMvU2xpZGVBU2VhbC9wdWJsaWMvamF2YXNjcmlwdHMvYXBwL1NlYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvU3RlZmFuL0Rvd25sb2Fkcy9TbGlkZUFTZWFsL2Fzc2V0cy9qYXZhc2NyaXB0cy9hcHAvU2VhbC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQTs7K0JBQUE7O0FBQUEsTUFBQSxDQUFPLENBQUUsUUFBRixFQUFZLGFBQVosQ0FBUCxFQUFrQyxTQUFDLE1BQUQsRUFBUyxTQUFULEdBQUE7QUFNaEMsTUFBQSxJQUFBO1NBQU07QUFJSiwyQkFBQSxDQUFBOztBQUFBLElBQUEsSUFBQyxDQUFBLE9BQUQsR0FBVSxTQUFDLElBQUQsR0FBQTtBQUNSLFVBQUEsNkJBQUE7QUFBQSxNQUFBLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVixDQUF1QixnQkFBdkIsRUFBd0MsSUFBSSxDQUFDLFlBQUwsQ0FBbUIsbUJBQW5CLENBQXhDLEVBQWdGLEdBQWhGLEVBQXFGLEdBQXJGLEVBQTBGLEVBQTFGLENBQUEsQ0FBQTtBQUFBLE1BQ0EsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFWLENBQXVCLGdCQUF2QixFQUF3QyxJQUFJLENBQUMsWUFBTCxDQUFtQix1QkFBbkIsQ0FBeEMsRUFBb0YsR0FBcEYsRUFBeUYsR0FBekYsRUFBOEYsRUFBOUYsQ0FEQSxDQUFBO0FBQUEsTUFHQSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVYsQ0FBdUIsZUFBdkIsRUFBdUMsSUFBSSxDQUFDLFlBQUwsQ0FBbUIsd0JBQW5CLENBQXZDLEVBQW9GLEdBQXBGLEVBQXlGLEdBQXpGLEVBQThGLEVBQTlGLENBSEEsQ0FBQTtBQUFBLE1BSUEsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFWLENBQXVCLGVBQXZCLEVBQXVDLElBQUksQ0FBQyxZQUFMLENBQW1CLDRCQUFuQixDQUF2QyxFQUF3RixHQUF4RixFQUE2RixHQUE3RixFQUFrRyxFQUFsRyxDQUpBLENBQUE7QUFNQTtBQUFBO1dBQUEsV0FBQTs2QkFBQTtBQUNFLHNCQUFBLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBVixDQUFnQixHQUFoQixFQUFxQixJQUFJLENBQUMsWUFBTCxDQUFrQixRQUFsQixDQUFyQixFQUFrRCxJQUFsRCxFQUFBLENBREY7QUFBQTtzQkFQUTtJQUFBLENBQVYsQ0FBQTs7QUFBQSxJQWFBLElBQUMsQ0FBQSxjQUFELEdBQWlCO0FBQUEsTUFDZixJQUFBLEVBQU0sRUFEUztBQUFBLE1BRWYsSUFBQSxFQUFNLEVBRlM7QUFBQSxNQUdmLElBQUEsRUFBTSxFQUhTO0tBYmpCLENBQUE7O0FBQUEsSUFzQkEsSUFBQyxDQUFBLFVBQUQsR0FBYTtBQUFBLE1BQ1gsS0FBQSxFQUFPLHdCQURJO0FBQUEsTUFFWCxLQUFBLEVBQU8sd0JBRkk7QUFBQSxNQUdYLEtBQUEsRUFBTyx3QkFISTtBQUFBLE1BSVgsS0FBQSxFQUFPLHdCQUpJO0FBQUEsTUFLWCxLQUFBLEVBQU8sd0JBTEk7QUFBQSxNQU1YLEtBQUEsRUFBTyx3QkFOSTtBQUFBLE1BT1gsS0FBQSxFQUFPLHdCQVBJO0FBQUEsTUFRWCxLQUFBLEVBQU8sd0JBUkk7QUFBQSxNQVNYLEtBQUEsRUFBTyx3QkFUSTtBQUFBLE1BVVgsTUFBQSxFQUFRLHlCQVZHO0FBQUEsTUFXWCxNQUFBLEVBQVEseUJBWEc7S0F0QmIsQ0FBQTs7QUFBQSxJQXdDQSxJQUFDLENBQUEsS0FBRCxHQUFRO0FBQUEsTUFDTixJQUFBLEVBQU0sRUFEQTtBQUFBLE1BRU4sS0FBQSxFQUFPLEVBRkQ7S0F4Q1IsQ0FBQTs7QUFBQSxJQWdEQSxJQUFDLENBQUEsbUJBQUQsR0FBc0IsU0FBQyxJQUFELEdBQUE7QUFDcEIsY0FBUSxJQUFSO0FBQUEsYUFDTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBRGxCO0FBRUksaUJBQU8sQ0FBRSxlQUFGLEVBQW1CLGVBQW5CLENBQVAsQ0FGSjtBQUFBLGFBR08sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUhsQjtBQUlJLGlCQUFPLENBQUUsZ0JBQUYsRUFBb0IsZ0JBQXBCLENBQVAsQ0FKSjtBQUFBLE9BRG9CO0lBQUEsQ0FoRHRCLENBQUE7O0FBQUEsSUEwREEsSUFBQyxDQUFBLHNCQUFELEdBQXlCLFNBQUEsR0FBQTtBQUN2QixVQUFBLHNCQUFBO0FBQUEsTUFBQSxJQUFBLEdBQU8sRUFBUCxDQUFBO0FBQ0E7QUFBQSxXQUFBLFdBQUE7MEJBQUE7QUFDRSxRQUFBLElBQUksQ0FBQyxJQUFMLENBQVUsS0FBVixDQUFBLENBREY7QUFBQSxPQURBO0FBR0EsYUFBTyxJQUFLLENBQUEsSUFBSSxDQUFDLEtBQUwsQ0FBVyxJQUFJLENBQUMsTUFBTCxDQUFBLENBQUEsR0FBYyxJQUFJLENBQUMsTUFBOUIsQ0FBQSxDQUFaLENBSnVCO0lBQUEsQ0ExRHpCLENBQUE7O0FBcUVhLElBQUEsY0FBQyxJQUFELEVBQU0sTUFBTixFQUFjLENBQWQsRUFBc0IsQ0FBdEIsRUFBNkIsSUFBN0IsR0FBQTtBQUNYLFVBQUEsV0FBQTs7UUFEeUIsSUFBSTtPQUM3Qjs7UUFEaUMsSUFBSTtPQUNyQzs7UUFEd0MsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO09BQzFEO0FBQUEsbUVBQUEsQ0FBQTtBQUFBLHFEQUFBLENBQUE7QUFBQSwrREFBQSxDQUFBO0FBQUEsdUVBQUEsQ0FBQTtBQUFBLDJEQUFBLENBQUE7QUFBQSwrQ0FBQSxDQUFBO0FBQUEsK0NBQUEsQ0FBQTtBQUFBLCtDQUFBLENBQUE7QUFBQSwrQ0FBQSxDQUFBO0FBQUEsTUFBQSxzQ0FBTSxJQUFOLEVBQVcsTUFBWCxFQUFtQixhQUFuQixFQUFnQyxJQUFoQyxDQUFBLENBQUE7QUFBQSxNQUVBLFdBQUEsR0FBYyxJQUFJLENBQUMsbUJBQUwsQ0FBeUIsSUFBekIsQ0FGZCxDQUFBO0FBQUEsTUFJQSxJQUFDLENBQUEsSUFBRCxHQUFRLElBQUMsQ0FBQSxNQUFELENBQVEsQ0FBUixFQUFVLENBQVYsRUFBWSxXQUFZLENBQUEsQ0FBQSxDQUF4QixDQUpSLENBQUE7QUFBQSxNQUtBLElBQUMsQ0FBQSxPQUFELENBQVMsSUFBQyxDQUFBLElBQVYsQ0FMQSxDQUFBO0FBQUEsTUFNQSxJQUFDLENBQUEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFqQixDQUFzQixNQUF0QixFQUE0QixJQUE1QixFQUFpQyxFQUFqQyxDQU5BLENBQUE7QUFBQSxNQU9BLElBQUMsQ0FBQSxTQUFELEdBQWEsSUFQYixDQUFBO0FBQUEsTUFRQSxJQUFDLENBQUEsU0FBRCxHQUFhLEtBUmIsQ0FBQTtBQUFBLE1BV0EsSUFBQyxDQUFBLFFBQUQsR0FBWSxJQUFDLENBQUEsTUFBRCxDQUFRLENBQVIsRUFBVSxDQUFWLEVBQVksV0FBWSxDQUFBLENBQUEsQ0FBeEIsQ0FYWixDQUFBO0FBQUEsTUFZQSxJQUFDLENBQUEsT0FBRCxDQUFTLElBQUMsQ0FBQSxRQUFWLENBWkEsQ0FBQTtBQUFBLE1BYUEsSUFBQyxDQUFBLFFBQVEsQ0FBQyxPQUFWLEdBQW9CLENBYnBCLENBQUE7QUFBQSxNQWNBLElBQUMsQ0FBQSxRQUFRLENBQUMsVUFBVSxDQUFDLEdBQXJCLENBQTBCLE1BQTFCLEVBQWdDLElBQWhDLEVBQXFDLEVBQXJDLENBZEEsQ0FEVztJQUFBLENBckViOztBQUFBLG1CQXVGQSxPQUFBLEdBQVMsU0FBQSxHQUFBO2FBQ1AsSUFBQyxDQUFBLFNBQUQsR0FBYSxLQUROO0lBQUEsQ0F2RlQsQ0FBQTs7QUFBQSxtQkE0RkEsT0FBQSxHQUFTLFNBQUMsSUFBRCxHQUFBO2FBQ1AsSUFBQyxDQUFBLFVBRE07SUFBQSxDQTVGVCxDQUFBOztBQUFBLG1CQWlHQSxPQUFBLEdBQVMsU0FBQSxHQUFBO2FBQUksSUFBQyxDQUFBLFVBQUw7SUFBQSxDQWpHVCxDQUFBOztBQUFBLG1CQXFHQSxPQUFBLEdBQVMsU0FBQyxJQUFELEdBQUE7QUFDUCxNQUFBLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBWixDQUFrQixHQUFsQixFQUFzQixHQUF0QixDQUFBLENBQUE7QUFBQSxNQUVBLElBQUksQ0FBQyxDQUFMLEdBQVMsQ0FBQyxJQUFJLENBQUMsU0FBTCxDQUFBLENBQWdCLENBQUMsS0FBakIsR0FBdUIsR0FBeEIsQ0FBQSxHQUErQixJQUFJLENBQUMsTUFBTSxDQUFDLENBRnBELENBQUE7QUFBQSxNQUdBLElBQUksQ0FBQyxDQUFMLEdBQVMsQ0FBQyxJQUFJLENBQUMsU0FBTCxDQUFBLENBQWdCLENBQUMsTUFBakIsR0FBd0IsR0FBekIsQ0FBQSxHQUFnQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQTVDLEdBQWdELENBQUEsQ0FIekQsQ0FBQTthQUlBLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBWCxDQUFpQixHQUFqQixFQUFxQixHQUFyQixFQUxPO0lBQUEsQ0FyR1QsQ0FBQTs7QUFBQSxtQkFnSEEsYUFBQSxHQUFlLFNBQUMsVUFBRCxFQUFhLFVBQWIsR0FBQTtBQUNiLE1BQUEsVUFBVSxDQUFDLENBQVgsR0FBZSxVQUFVLENBQUMsQ0FBMUIsQ0FBQTtBQUFBLE1BQ0EsVUFBVSxDQUFDLENBQVgsR0FBZSxVQUFVLENBQUMsQ0FEMUIsQ0FBQTtBQUFBLE1BRUEsVUFBVSxDQUFDLE9BQVgsR0FBcUIsQ0FGckIsQ0FBQTthQUdBLFVBQVUsQ0FBQyxPQUFYLEdBQXFCLEVBSlI7SUFBQSxDQWhIZixDQUFBOztBQUFBLG1CQTBIQSxtQkFBQSxHQUFxQixTQUFBLEdBQUE7QUFFbkIsVUFBQSxLQUFBO0FBQUEsY0FBUSxJQUFJLENBQUMsc0JBQUwsQ0FBQSxDQUFSO0FBQUEsYUFDTyxJQUFJLENBQUMsY0FBYyxDQUFDLElBRDNCO0FBRU0sVUFBQSxJQUFDLENBQUEsYUFBRCxDQUFlLElBQUMsQ0FBQSxRQUFoQixFQUF5QixJQUFDLENBQUEsSUFBMUIsQ0FBQSxDQUFBO0FBQUEsVUFDQSxLQUFBLEdBQVEsSUFBQyxDQUFBLFFBQVEsQ0FBQyxJQUFWLENBQWdCLE1BQWhCLENBRFIsQ0FBQTtBQUVBLFVBQUEsSUFBRyxLQUFBLEtBQVMsTUFBWjtBQUNFLFlBQUEsS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFqQixDQUFxQixTQUFBLEdBQUE7QUFDbkIsY0FBQSxJQUFDLENBQUEsYUFBRCxDQUFlLElBQUMsQ0FBQSxJQUFoQixFQUFxQixJQUFDLENBQUEsUUFBdEIsQ0FBQSxDQUFBO0FBQ0EsY0FBQSxJQUFHLElBQUksQ0FBQyxNQUFMLENBQUEsQ0FBQSxHQUFnQixHQUFuQjt1QkFDRSxJQUFDLENBQUEsbUJBQUQsQ0FBQSxFQURGO2VBRm1CO1lBQUEsQ0FBckIsRUFJQyxJQUpELENBQUEsQ0FERjtXQUZBO0FBUUEsaUJBQU8sS0FBUCxDQVZOO0FBQUEsYUFZTyxJQUFJLENBQUMsY0FBYyxDQUFDLElBWjNCO0FBYU0sVUFBQSxJQUFDLENBQUEsYUFBRCxDQUFlLElBQUMsQ0FBQSxJQUFoQixFQUFxQixJQUFDLENBQUEsUUFBdEIsQ0FBQSxDQUFBO2lCQUNBLElBQUMsQ0FBQSxJQUFJLENBQUMsSUFBTixDQUFZLE1BQVosRUFkTjtBQUFBLGFBZU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQWYzQjtpQkFnQkksSUFBQyxDQUFBLG1CQUFELENBQUEsRUFoQko7QUFBQSxPQUZtQjtJQUFBLENBMUhyQixDQUFBOztBQUFBLG1CQWdKQSxlQUFBLEdBQWlCLFNBQUEsR0FBQTtBQUNmLFVBQUEsb0RBQUE7QUFBQSxNQUFBLE1BQUEsR0FBUyxFQUFULENBQUE7QUFDQTtBQUFBLFdBQUEsZ0JBQUE7K0JBQUE7QUFDRSxRQUFBLE1BQU0sQ0FBQyxJQUFQLENBQVksUUFBWixDQUFBLENBREY7QUFBQSxPQURBO0FBQUEsTUFHQSxVQUFBLEdBQWEsSUFBSSxDQUFDLEtBQUwsQ0FBVyxJQUFJLENBQUMsTUFBTCxDQUFBLENBQUEsR0FBYyxNQUFNLENBQUMsTUFBaEMsQ0FIYixDQUFBO2FBS0EsU0FBQSxHQUFZLElBQUMsQ0FBQSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQVosQ0FBaUIsTUFBTyxDQUFBLFVBQUEsQ0FBeEIsRUFBcUMsSUFBSSxDQUFDLE1BQUwsQ0FBQSxDQUFBLEdBQWMsR0FBbkQsRUFBd0QsS0FBeEQsRUFORztJQUFBLENBaEpqQixDQUFBOztBQUFBLG1CQTJKQSxVQUFBLEdBQVksU0FBQyxZQUFELEdBQUE7QUFHVixVQUFBLDJDQUFBO0FBQUEsTUFBQSxJQUFHLENBQUEsSUFBSyxDQUFBLFNBQVI7QUFDRSxjQUFBLENBREY7T0FBQTtBQUFBLE1BR0EsU0FBQSxHQUFZLFlBSFosQ0FBQTtBQUFBLE1BSUEsTUFBQSxHQUFTLElBQUMsQ0FBQSxTQUFELENBQUEsQ0FKVCxDQUFBO0FBTUEsTUFBQSxJQUFHLElBQUMsQ0FBQSxPQUFELENBQUEsQ0FBQSxLQUFjLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBNUI7QUFDRSxRQUFBLElBQUEsR0FBTyxJQUFDLENBQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFaLEdBQW9CLElBQUksQ0FBQyxNQUFMLENBQUEsQ0FBQSxHQUFjLEdBQXpDLENBREY7T0FBQSxNQUVLLElBQUcsSUFBQyxDQUFBLE9BQUQsQ0FBQSxDQUFBLEtBQWMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUE1QjtBQUNILFFBQUEsSUFBQSxHQUFPLElBQUksQ0FBQyxNQUFMLENBQUEsQ0FBQSxHQUFjLEdBQXJCLENBREc7T0FSTDtBQUFBLE1BV0EsSUFBQSxHQUFPLElBQUMsQ0FBQSxDQVhSLENBQUE7QUFBQSxNQWFBLEtBQUEsR0FBUSxJQUFJLENBQUMsTUFBTCxDQUFBLENBYlIsQ0FBQTtBQUFBLE1BY0EsS0FBQSxHQUFRLElBQUMsQ0FBQSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQVYsQ0FBZ0IsSUFBaEIsQ0FBa0IsQ0FBQyxFQUFuQixDQUFzQjtBQUFBLFFBQUEsQ0FBQSxFQUFHLElBQUg7QUFBQSxRQUFTLENBQUEsRUFBRyxJQUFaO09BQXRCLEVBQXVDLElBQXZDLEVBQTRDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQXBFLEVBQXdFLElBQXhFLEVBQTZFLEtBQTdFLENBZFIsQ0FBQTtBQUFBLE1BZUEsS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFqQixDQUFxQixTQUFBLEdBQUE7QUFDbkIsWUFBQSxPQUFBO0FBQUEsUUFBQSxJQUFHLElBQUMsQ0FBQSxJQUFELEtBQVMsSUFBWjtBQUNFLFVBQUEsT0FBQSxHQUFjLElBQUEsSUFBQSxDQUFLLFNBQVMsQ0FBQyxJQUFmLEVBQW9CLFNBQXBCLEVBQThCLENBQTlCLEVBQWdDLENBQWhDLEVBQWtDLFNBQVMsQ0FBQyxPQUFWLENBQUEsQ0FBbEMsQ0FBZCxDQUFBO0FBQUEsVUFDQSxPQUFPLENBQUMsaUJBQVIsQ0FBMEIsU0FBUyxDQUFDLGFBQVYsQ0FBQSxDQUExQixDQURBLENBQUE7QUFBQSxVQUVBLFNBQVMsQ0FBQyxHQUFWLENBQWMsT0FBZCxFQUFzQixLQUF0QixDQUZBLENBQUE7aUJBR0EsSUFBQyxDQUFBLE9BQUQsQ0FBQSxFQUpGO1NBRG1CO01BQUEsQ0FBckIsRUFNRSxJQU5GLENBZkEsQ0FBQTtBQXNCQSxhQUFPLEtBQVAsQ0F6QlU7SUFBQSxDQTNKWixDQUFBOztBQUFBLG1CQXlMQSxpQkFBQSxHQUFtQixTQUFDLFdBQUQsR0FBQTtBQUNqQixVQUFBLDZCQUFBOztRQURrQixjQUFjO09BQ2hDO0FBQUEsTUFBQSxJQUFBLEdBQU8sQ0FBUCxDQUFBO0FBQUEsTUFDQSxJQUFBLEdBQU8sQ0FEUCxDQUFBO0FBR0EsTUFBQSxJQUFHLFdBQUEsS0FBZSxJQUFsQjtBQUNFLFFBQUEsaUJBQUEsR0FBb0IsV0FBVyxDQUFDLFNBQVosQ0FBQSxDQUFwQixDQUFBO0FBQUEsUUFDQSxJQUFBLEdBQU8sV0FBVyxDQUFDLENBQVosR0FBZ0IsaUJBQWlCLENBQUMsS0FBbEIsR0FBd0IsRUFEL0MsQ0FBQTtBQUFBLFFBRUEsSUFBQSxHQUFPLFdBQVcsQ0FBQyxDQUZuQixDQUFBO0FBQUEsUUFJQSxJQUFBLEdBQU8sSUFBQSxHQUFPLEVBQVAsR0FBWSxJQUFJLENBQUMsS0FBTCxDQUFXLElBQUksQ0FBQyxNQUFMLENBQUEsQ0FBQSxHQUFjLEdBQXpCLENBSm5CLENBQUE7QUFBQSxRQUtBLElBQUEsR0FBTyxJQUFBLEdBQU8sRUFBUCxHQUFZLElBQUksQ0FBQyxLQUFMLENBQVcsSUFBSSxDQUFDLE1BQUwsQ0FBQSxDQUFBLEdBQWMsRUFBekIsQ0FMbkIsQ0FERjtPQUhBO0FBQUEsTUFXQSxJQUFDLENBQUEsQ0FBRCxHQUFLLElBWEwsQ0FBQTthQVlBLElBQUMsQ0FBQSxDQUFELEdBQUssS0FiWTtJQUFBLENBekxuQixDQUFBOztnQkFBQTs7S0FKaUIsTUFBTSxDQUFDLE9BTk07QUFBQSxDQUFsQyxDQUFBLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUgWydQaGFzZXInLCAnLi9TZWFsQm9hcmQnXSwgKFBoYXNlciwgU2VhbEJvYXJkKS0+XG5cblxuICAjVGhpcyBjbGFzcyBjb250cm9scyBvbmUgU2VhbCBvbiB0aGUgc2NyZWVuXG4gICNAY2xhc3NcbiAgI0BleHRlbmRzIFBoYXNlci5Hcm91cFxuICBjbGFzcyBTZWFsIGV4dGVuZHMgUGhhc2VyLkdyb3VwXG4gICAgIyBMb2FkIGFsbCBzcHJpdGVzIGFuZCBzb3VuZHNcbiAgICAjIEBzdGF0aWNcbiAgICAjXG4gICAgQHByZWxvYWQ6IChnYW1lKS0+XG4gICAgICBnYW1lLmxvYWQuc3ByaXRlc2hlZXQoJ1JvYmJlQ2xhcFJpZ2h0JywgZ2FtZS5ub3JtYWxpemVVcmwoJy9JbWFnZXMvUm9iYmUucG5nJyksIDUyMCwgNTIwLCAxNyk7XG4gICAgICBnYW1lLmxvYWQuc3ByaXRlc2hlZXQoJ1JvYmJlQmFsbFJpZ2h0JywgZ2FtZS5ub3JtYWxpemVVcmwoJy9JbWFnZXMvUm9iYmVCYWxsLnBuZycpLCA1MjAsIDUyMCwgMTgpO1xuXG4gICAgICBnYW1lLmxvYWQuc3ByaXRlc2hlZXQoJ1JvYmJlQ2xhcExlZnQnLCBnYW1lLm5vcm1hbGl6ZVVybCgnL0ltYWdlcy9Sb2JiZWxpbmtzLnBuZycpLCA1MjAsIDUyMCwgMTcpO1xuICAgICAgZ2FtZS5sb2FkLnNwcml0ZXNoZWV0KCdSb2JiZUJhbGxMZWZ0JywgZ2FtZS5ub3JtYWxpemVVcmwoJy9JbWFnZXMvUm9iYmVCYWxsTGlua3MucG5nJyksIDUyMCwgNTIwLCAxOCk7XG5cbiAgICAgIGZvciBrZXksIHNvdW5kVXJsIG9mIFNlYWwuc291bmRUeXBlc1xuICAgICAgICBnYW1lLmxvYWQuYXVkaW8oa2V5LCBnYW1lLm5vcm1hbGl6ZVVybChzb3VuZFVybCksIHRydWUpO1xuXG5cbiAgICAjQHN0YXRpY1xuICAgICNBbmltYXRpb24gdHlwZXNcbiAgICBAYW5pbWF0aW9uVHlwZXM6IHtcbiAgICAgIENMQVA6IDEwXG4gICAgICBCQUxMOiAyMFxuICAgICAgUE9GRjogMzBcbiAgICB9XG5cblxuICAgICNAc3RhdGljXG4gICAgI1NvdW5kdHlwZXNcbiAgICBAc291bmRUeXBlczoge1xuICAgICAgc2VhbDE6XCJzb3VuZHMvc2VhbHMvc2VhbDEub2dnXCJcbiAgICAgIHNlYWwyOlwic291bmRzL3NlYWxzL3NlYWwyLm9nZ1wiXG4gICAgICBzZWFsMzpcInNvdW5kcy9zZWFscy9zZWFsMy5vZ2dcIlxuICAgICAgc2VhbDQ6XCJzb3VuZHMvc2VhbHMvc2VhbDQub2dnXCJcbiAgICAgIHNlYWw1Olwic291bmRzL3NlYWxzL3NlYWw1Lm9nZ1wiXG4gICAgICBzZWFsNjpcInNvdW5kcy9zZWFscy9zZWFsNi5vZ2dcIlxuICAgICAgc2VhbDc6XCJzb3VuZHMvc2VhbHMvc2VhbDcub2dnXCJcbiAgICAgIHNlYWw4Olwic291bmRzL3NlYWxzL3NlYWw4Lm9nZ1wiXG4gICAgICBzZWFsOTpcInNvdW5kcy9zZWFscy9zZWFsOS5vZ2dcIlxuICAgICAgc2VhbDEwOlwic291bmRzL3NlYWxzL3NlYWwxMC5vZ2dcIlxuICAgICAgc2VhbDExOlwic291bmRzL3NlYWxzL3NlYWwxMS5vZ2dcIlxuXG4gICAgfVxuXG5cbiAgICAjQFN0YXRpY1xuICAgICNUaGUgUG9zdGlvbiBvZiB0aGUgc2VhbFxuICAgIEBzaWRlczoge1xuICAgICAgTEVGVDogMTBcbiAgICAgIFJJR0hUOiAyMFxuICAgIH1cblxuICAgICNAc3RhdGljXG4gICAgI0BwYXJhbSB7U2VhbC5zaWRlfSBzaWRlIC0gVGhlIHNpZGUgZm9yIHRoZSBzZWFsXG4gICAgI0ByZXR1cm5zIHtBcnJheTxTdHJpbmc+fSBBIGFycmF5IG9mIGxlbmdodCAyXG4gICAgQGdldFNwcml0ZU5hbWVCeVNpZGU6IChzaWRlKS0+XG4gICAgICBzd2l0Y2ggKHNpZGUpXG4gICAgICAgIHdoZW4gU2VhbC5zaWRlcy5MRUZUXG4gICAgICAgICAgcmV0dXJuIFsnUm9iYmVDbGFwTGVmdCcsICdSb2JiZUJhbGxMZWZ0J11cbiAgICAgICAgd2hlbiBTZWFsLnNpZGVzLlJJR0hUXG4gICAgICAgICAgcmV0dXJuIFsnUm9iYmVDbGFwUmlnaHQnLCAnUm9iYmVDbGFwUmlnaHQnXVxuXG4gICAgI0BzdGF0aWNcbiAgICAjcmV0dXJucyBhIHN0YXRpYyBhbmltYXRpb25cbiAgICAjQHJldHVucyB7U2VhbC5hbmltYXRpb25zfVxuICAgIEBnZXRSYW5kb21BbmltYXRpb25UeXBlOiAoKS0+XG4gICAgICBsaXN0ID0gW107XG4gICAgICBmb3Iga2V5LCB2YWx1ZSBvZiBTZWFsLmFuaW1hdGlvblR5cGVzXG4gICAgICAgIGxpc3QucHVzaCh2YWx1ZSlcbiAgICAgIHJldHVybiBsaXN0W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSpsaXN0Lmxlbmd0aCldXG5cbiAgICAjQHBhcmFtIHtQaGFzZXIuR2FtZX1cbiAgICAjQHBhcmFtIHtQaGFzZXIuU2VhbGJvYXJkfVxuICAgICNAcGFyYW0ge2ludH0geFxuICAgICNAcGFyYW0ge2ludH0geVxuICAgICNAcGFyYW0ge1NlYWxCb2FyZC5zaWRlc30gc2lkZSBHaWJ0IGRpZSBTZWl0ZSBhbiBhdWYgZGVuZW4gZGllIFJvYmJlIGFuZ2V6ZWlndCB3aXJkXG4gICAgY29uc3RydWN0b3I6IChnYW1lLHBhcmVudCwgeCA9IDAgLCB5ID0gMCwgc2lkZSA9IFNlYWwuc2lkZXMuTEVGVCApLT5cbiAgICAgIHN1cGVyKGdhbWUscGFyZW50LCdST0JCRV9HUk9VUCcsdHJ1ZSlcblxuICAgICAgc3ByaXRlTmFtZXMgPSBTZWFsLmdldFNwcml0ZU5hbWVCeVNpZGUoc2lkZSlcblxuICAgICAgQHNlYWwgPSBAY3JlYXRlKHgseSxzcHJpdGVOYW1lc1swXSlcbiAgICAgIEBzZXRTaXplKEBzZWFsKVxuICAgICAgQHNlYWwuYW5pbWF0aW9ucy5hZGQoXCJjbGFwXCIsbnVsbCwxMSlcbiAgICAgIEBzZWFsX3NpZGUgPSBzaWRlXG4gICAgICBAU0FMX3Nob3duID0gZmFsc2VcblxuXG4gICAgICBAc2VhbEJhbGwgPSBAY3JlYXRlKHgseSxzcHJpdGVOYW1lc1sxXSlcbiAgICAgIEBzZXRTaXplKEBzZWFsQmFsbClcbiAgICAgIEBzZWFsQmFsbC52aXNpYmxlID0gMDtcbiAgICAgIEBzZWFsQmFsbC5hbmltYXRpb25zLmFkZChcImJhbGxcIixudWxsLDExKVxuXG4gICAgI3NldCB0aGUgc2hvd24gcGFyYW1cbiAgICBzZXRTaG93OiAoKT0+XG4gICAgICBAU0FMX3Nob3duID0gdHJ1ZVxuXG4gICAgIyBTZXR0ZXIgZm9yIHRoZSBzaWRlXG4gICAgIyBAcGFyYW0ge1NlYWwuc2lkZXN9IHNpZGVcbiAgICBzZXRTaWRlOiAoc2lkZSk9PlxuICAgICAgQHNlYWxfc2lkZVxuXG4gICAgIyBHZXR0ZXIgZm9yIHRoZSBzaWRlXG4gICAgIyBAcmV0dXJuIHtTZWFsLnNpZGVzfSBzaWRlXG4gICAgZ2V0U2lkZTogKCk9PkBzZWFsX3NpZGVcblxuICAgICMgU2V0IHRoZSBzZWFsIHRvIGEgc3BlY2lmaWMgc2l6ZSwgYW5jaG9yIGFuZCBsb2NhbCB4LHlcbiAgICAjIEBwYXJhbSB7U2VhbH0gc2VhbCB0aGUgc2VhbCB0byBzZXQgc2l6ZVxuICAgIHNldFNpemU6IChzZWFsKT0+XG4gICAgICBzZWFsLmFuY2hvci5zZXRUbygwLjUsMC41KVxuICAgICAgI0tvcnJla3Qgc2l6ZVxuICAgICAgc2VhbC54ID0gKHNlYWwuZ2V0Qm91bmRzKCkud2lkdGgtMjAwKSAqIHNlYWwuYW5jaG9yLnhcbiAgICAgIHNlYWwueSA9IChzZWFsLmdldEJvdW5kcygpLmhlaWdodC0zMDApICogc2VhbC5hbmNob3IueSAqIC0xXG4gICAgICBzZWFsLnNjYWxlLnNldFRvKDAuMywwLjMpXG5cbiAgICAjIFNldCB0aGUgc2VhbCBwb3N0aW9ucyBmcm9tIHNlYWxUb0hpZGUgdG8gc2VhbFRvU2hvd1xuICAgICMgYW5kIHNldCB2aXNpYmxlIHRvIDFcbiAgICAjIEBwYXJhbSB7U2VhbH0gc2VhbFRvU2hvdyBUaGUgc2VhbCB5b3Ugd2FudCB0byBzaG93XG4gICAgIyBAcGFyYW0ge1NlYWx9IHNlYWxUb0hpZGUgVGhlIHNlYWwgeW91IHdhbnQgdG8gaGlkZVxuICAgIHN5bmNQb3NpdGlvbnM6IChzZWFsVG9TaG93LCBzZWFsVG9IaWRlKT0+XG4gICAgICBzZWFsVG9TaG93LnkgPSBzZWFsVG9IaWRlLnlcbiAgICAgIHNlYWxUb1Nob3cueCA9IHNlYWxUb0hpZGUueFxuICAgICAgc2VhbFRvU2hvdy52aXNpYmxlID0gMVxuICAgICAgc2VhbFRvSGlkZS52aXNpYmxlID0gMFxuXG5cbiAgICAjIFBsYXkgYSByYW5kb20gc2VxdWVueiBvZiBhbmltYXRpb25zXG4gICAgIyBAcmV0dW5zIHtQaGFzZXIuVHdlZW58bnVsbHxQaGFzZXIudGltZS5ldmVudH1cbiAgICAjXG4gICAgcGxheVJhbmRvbUFuaW1hdGlvbjogKCk9PlxuXG4gICAgICBzd2l0Y2ggKFNlYWwuZ2V0UmFuZG9tQW5pbWF0aW9uVHlwZSgpKVxuICAgICAgICB3aGVuIFNlYWwuYW5pbWF0aW9uVHlwZXMuQkFMTFxuICAgICAgICAgICAgQHN5bmNQb3NpdGlvbnMoQHNlYWxCYWxsLEBzZWFsKVxuICAgICAgICAgICAgdHdlZW4gPSBAc2VhbEJhbGwucGxheShcImJhbGxcIilcbiAgICAgICAgICAgIGlmIHR3ZWVuICE9IHVuZGVmaW5lZFxuICAgICAgICAgICAgICB0d2Vlbi5vbkNvbXBsZXRlLmFkZCgoKS0+XG4gICAgICAgICAgICAgICAgQHN5bmNQb3NpdGlvbnMoQHNlYWwsQHNlYWxCYWxsKVxuICAgICAgICAgICAgICAgIGlmIE1hdGgucmFuZG9tKCkgPCAwLjVcbiAgICAgICAgICAgICAgICAgIEBwbGF5UmFuZG9tQW5pbWF0aW9uKClcbiAgICAgICAgICAgICAgLEApXG4gICAgICAgICAgICByZXR1cm4gdHdlZW5cblxuICAgICAgICB3aGVuIFNlYWwuYW5pbWF0aW9uVHlwZXMuQ0xBUFxuICAgICAgICAgICAgQHN5bmNQb3NpdGlvbnMoQHNlYWwsQHNlYWxCYWxsKVxuICAgICAgICAgICAgQHNlYWwucGxheShcImNsYXBcIilcbiAgICAgICAgd2hlbiBTZWFsLmFuaW1hdGlvblR5cGVzLlBPRkZcbiAgICAgICAgICBAcGxheVJhbmRvbUFuaW1hdGlvbigpXG5cblxuICAgICNwbGF5cyBhIHJhbmRvbSBzb3VuZFxuICAgIHBsYXlSYW5kb21Tb3VuZDogKCk9PlxuICAgICAgc291bmRzID0gW11cbiAgICAgIGZvciBzb3VuZEtleSx2YWx1ZSBvZiBTZWFsLnNvdW5kVHlwZXNcbiAgICAgICAgc291bmRzLnB1c2goc291bmRLZXkpXG4gICAgICBzb3VuZEluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKnNvdW5kcy5sZW5ndGgpXG5cbiAgICAgIHNlYWxTb3VuZCA9IEBnYW1lLnNvdW5kLnBsYXkoc291bmRzW3NvdW5kSW5kZXhdLCBNYXRoLnJhbmRvbSgpKjAuNywgZmFsc2UpO1xuXG5cbiAgICAjQ2hhbmdlIHRoZSBzaWRlIG9mIHRoZSBzZWFsXG4gICAgI0ByZXR1cm4ge1BoYXNlci5Ud2Vlbn0gdHdlZW4gYW5pbWF0aW9uIHR3ZWVuXG4gICAgY2hhbmdlU2lkZTogKG5ld1NlYWxCb2FyZCk9PlxuXG4gICAgICAjUmV0dXJuIGlmIHRoZSBzZWFsIG5vdCBzaG93biBqZXRcbiAgICAgIGlmIG5vdCBAU0FMX3Nob3duXG4gICAgICAgIHJldHVyblxuXG4gICAgICBzZWFsQm9hcmQgPSBuZXdTZWFsQm9hcmRcbiAgICAgIGJvdW5kcyA9IEBnZXRCb3VuZHMoKVxuXG4gICAgICBpZiBAZ2V0U2lkZSgpID09IFNlYWwuc2lkZXMuTEVGVFxuICAgICAgICBuZXdYID0gQGdhbWUud29ybGQud2lkdGggLSBNYXRoLnJhbmRvbSgpKjIwMFxuICAgICAgZWxzZSBpZiBAZ2V0U2lkZSgpID09IFNlYWwuc2lkZXMuUklHSFRcbiAgICAgICAgbmV3WCA9IE1hdGgucmFuZG9tKCkqMjAwXG5cbiAgICAgIG5ld1kgPSBAeVxuXG4gICAgICBkZWxheSA9IE1hdGgucmFuZG9tKClcbiAgICAgIHR3ZWVuID0gQGdhbWUuYWRkLnR3ZWVuKEApLnRvKHg6IG5ld1gsIHk6IG5ld1ksMTAwMCxQaGFzZXIuRWFzaW5nLlF1YWRyYXRpYy5PdXQsdHJ1ZSxkZWxheSlcbiAgICAgIHR3ZWVuLm9uQ29tcGxldGUuYWRkKCgpLT5cbiAgICAgICAgaWYgQGdhbWUgIT0gbnVsbFxuICAgICAgICAgIG5ld1NlYWwgPSBuZXcgU2VhbChzZWFsQm9hcmQuZ2FtZSxzZWFsQm9hcmQsMCwwLHNlYWxCb2FyZC5nZXRTaWRlKCkpXG4gICAgICAgICAgbmV3U2VhbC5zZXRSYW5kb21Qb3NpdGlvbihzZWFsQm9hcmQuZ2V0UmFuZG9tU2VhbCgpKVxuICAgICAgICAgIHNlYWxCb2FyZC5hZGQobmV3U2VhbCxmYWxzZSlcbiAgICAgICAgICBAZGVzdHJveSgpXG4gICAgICAsIEApXG4gICAgICByZXR1cm4gdHdlZW5cblxuXG4gICAgI1xuICAgICNTZXQgdGhlIFNlYWwgb24gYSByYW5kb20gcG9zaXRpb24gYmFzZWQgb24gdGhlIHBhcmVudCBub3JtYWwgYSBzZWFsYm9hcmRcbiAgICBzZXRSYW5kb21Qb3NpdGlvbjogKHJlbGF0ZWRTZWFsID0gbnVsbCk9PlxuICAgICAgbmV3WCA9IDBcbiAgICAgIG5ld1kgPSAwXG4gICAgICAjSWYgc2VhbHMgaW4gR3JvdXAsIGdldCBMYXN0IHNlYWwgYW5kIHBsYWNlIG5ldyBTZWFsIG5lYXIgYnkgdGhlIG9sZCBzZWFsXG4gICAgICBpZiByZWxhdGVkU2VhbCAhPSBudWxsXG4gICAgICAgIHJlbGF0ZWRTZWFsQm91bmRzID0gcmVsYXRlZFNlYWwuZ2V0Qm91bmRzKClcbiAgICAgICAgbmV3WCA9IHJlbGF0ZWRTZWFsLnggKyByZWxhdGVkU2VhbEJvdW5kcy53aWR0aC8xMFxuICAgICAgICBuZXdZID0gcmVsYXRlZFNlYWwueVxuXG4gICAgICAgIG5ld1ggPSBuZXdYICsgMjAgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqMTUwKSAjIHggdmFyIGJpZyBiZWNhdXNlIHdlIGhhdmUgb24geCBtdWNoIG1vcmUgcGxhY2VcbiAgICAgICAgbmV3WSA9IG5ld1kgKyAxNSArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSoyMCkgICMgeSB2YXIgc21hbGwgYmVjYXVzZSBubyBwbGFjZSBpbiB2ZXJ0aWNhbCBvcmllbnRhdGlvblxuXG4gICAgICBAeCA9IG5ld1hcbiAgICAgIEB5ID0gbmV3WVxuXG5cblxuXG4iXX0=
