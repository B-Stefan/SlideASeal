var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

define(['Phaser', "jquery"], function(Phaser, $) {
  var Panel, PanelType;
  PanelType = (function() {
    PanelType.baseUrl = 'http://' + window.location.host + '/Images/panels/';

    PanelType.defaultExtention = '.png';

    function PanelType(name, id) {
      this.getImageUrl = __bind(this.getImageUrl, this);
      this.getId = __bind(this.getId, this);
      this.getName = __bind(this.getName, this);
      this.name = name;
      this.id = id;
    }

    PanelType.prototype.getName = function() {
      return this.name;
    };

    PanelType.prototype.getId = function() {
      return this.id;
    };

    PanelType.prototype.getImageUrl = function() {
      return PanelType.baseUrl + this.name + PanelType.defaultExtention;
    };

    return PanelType;

  })();
  return Panel = (function(_super) {
    __extends(Panel, _super);

    Panel.getDefaultPanelBorder = function() {
      return 11;
    };

    Panel.moveDirections = {
      LEFT: 10,
      RIGHT: 20,
      DOWN: 30,
      TOP: 40
    };

    Panel.getTypeRandom = function() {
      var key, randomType, value, values, _ref;
      values = [];
      _ref = Panel.types;
      for (key in _ref) {
        value = _ref[key];
        values.push(value);
      }
      randomType = values[Math.floor(Math.random() * values.length)];
      return randomType;
    };

    Panel.getTypeById = function(id) {
      var key, value, _ref;
      _ref = Panel.types;
      for (key in _ref) {
        value = _ref[key];
        if (id === value.getId()) {
          return value;
        }
      }
      return null;
    };

    Panel.types = {
      ANCHOR: new PanelType('ANCHOR', 1),
      WHEEL: new PanelType('WHEEL', 2),
      LIFEBELT: new PanelType('LIFEBELT', 3),
      FISH_REST: new PanelType('FISH_REST', 4),
      BALL: new PanelType('BALL', 5),
      FISH: new PanelType('FISH', 6),
      BARREL: new PanelType('BARREL', 7)
    };

    Panel.loadAllTypes = function(game) {
      var key, type, _ref;
      _ref = Panel.types;
      for (key in _ref) {
        type = _ref[key];
        game.load.image(type.getName(), type.getImageUrl());
      }
      return game.load.image("Panel_Background", PanelType.baseUrl + "ALLUBOX.png");
    };

    function Panel(game, parent, type) {
      this.getType = __bind(this.getType, this);
      this.setType = __bind(this.setType, this);
      this.getCol = __bind(this.getCol, this);
      this.getRow = __bind(this.getRow, this);
      this.setCol = __bind(this.setCol, this);
      this.setRow = __bind(this.setRow, this);
      this.getNeighbour = __bind(this.getNeighbour, this);
      this.kill = __bind(this.kill, this);
      this.slide = __bind(this.slide, this);
      this.show = __bind(this.show, this);
      this.setPositionNeighbour = __bind(this.setPositionNeighbour, this);
      this.setPosition = __bind(this.setPosition, this);
      if (!type in Panel.types) {
        console.log("please parse one of the following type", Panel.types);
      }
      Panel.__super__.constructor.call(this, game, parent, 'PANEL_GROUP', true);
      this.backgroundSprite = this.create(0, 0, 'Panel_Background');
      this.typeSprite = this.create(0, 0, type.getName());
      this.backgroundSprite.anchor.setTo(0.5, 0.5);
      this.typeSprite.anchor.setTo(0.5, 0.5);
      this.typeSprite.scale.setTo(0.8, 0.8);
      this.setType(type);
      this._SAS_col = -1;
      this._SAS_row = -1;
    }

    Panel.prototype.setPosition = function(row, col, border, animation) {
      var bounds, newX, newY;
      if (border == null) {
        border = Panel.getDefaultPanelBorder();
      }
      if (animation == null) {
        animation = false;
      }
      this.setRow(row);
      this.setCol(col);
      bounds = this.getBounds();
      newY = row * (bounds.height + border);
      newX = col * (bounds.width + border);
      if (animation === false) {
        this.y = newY;
        return this.x = newX;
      } else {
        return this.game.add.tween(this).to({
          x: newX,
          y: newY
        }, 1000, Phaser.Easing.Quadratic.In, false, 0, false);
      }
    };

    Panel.prototype.setPositionNeighbour = function(row, col, position, anchorBounds, border) {
      var selfBounds;
      if (border == null) {
        border = Panel.getDefaultPanelBorder();
      }
      this.setPosition(row, col, border);
      if (!position in Panel.moveDirections) {
        throw new Error("Please parse a moveDirection as Positoin ");
      }
      if (anchorBounds === void 0) {
        anchorBounds = this.parent.getBounds();
      }
      if (anchorBounds !== null) {
        this.x = this.x + anchorBounds.left;
        this.y = this.y + anchorBounds.top;
      }
      selfBounds = this.getBounds();
      this.x = this.x + selfBounds.width / 2;
      this.y = this.y + selfBounds.height / 2;
      switch (position) {
        case Panel.moveDirections.LEFT:
          return this.x = this.x - selfBounds.width - border;
        case Panel.moveDirections.RIGHT:
          return this.x = this.x + selfBounds.width + border;
        case Panel.moveDirections.TOP:
          return this.y = this.y - selfBounds.height - border;
      }
    };

    Panel.prototype.show = function() {
      this.typeSprite.alpha = 1;
      return this.backgroundSprite.alpha = 1;
    };

    Panel.prototype.slide = function(direction) {
      var downTween, neighbour, neighbourDown, neighbourTween, position, tween;
      console.log("Slide=>", this.getRow(), this.getCol());
      if (!direction in Panel.moveDirections) {
        throw new Error("Please parse a Panel.moveDirection");
      }
      switch (direction) {
        case Panel.moveDirections.DOWN:
          position = Panel.moveDirections.TOP;
          break;
        case Panel.moveDirections.LEFT:
          position = Panel.moveDirections.LEFT;
          break;
        case Panel.moveDirections.RIGHT:
          position = Panel.moveDirections.RIGHT;
          break;
        case Panel.moveDirections.TOP:
          position = Panel.moveDirections.DOWN;
      }
      neighbour = this.getNeighbour(position);
      if (neighbour !== null) {
        neighbourTween = neighbour.slide(direction);
      } else {
        console.log("END");
      }
      switch (direction) {
        case Panel.moveDirections.DOWN:
          tween = this.setPosition(this.getRow() + 1, this.getCol(), Panel.getDefaultPanelBorder(), true);
          break;
        case Panel.moveDirections.RIGHT:
          tween = this.setPosition(this.getRow(), this.getCol() + 1, Panel.getDefaultPanelBorder(), true);
          break;
        case Panel.moveDirections.LEFT:
          tween = this.setPosition(this.getRow(), this.getCol() - 1, Panel.getDefaultPanelBorder(), true);
          break;
        case Panel.moveDirections.TOP:
          tween = this.setPosition(this.getRow() - 1, this.getCol(), Panel.getDefaultPanelBorder(), true);
      }
      neighbourDown = this.getNeighbour(Panel.moveDirections.DOWN);
      if (neighbourDown === null && this.getRow() !== this.parent.getSize() - 1) {
        downTween = this.slide(Panel.moveDirections.DOWN);
        if (direction !== Panel.moveDirections.DOWN) {
          tween.onComplete.add(function() {
            return downTween.start();
          }, this);
        } else {
          tween.onStart.add(function() {
            return downTween.start();
          }, this);
        }
      }
      tween.onComplete.add(function() {
        var killTween;
        if (this.parent !== void 0) {
          if (this.getCol() === this.parent.getSize() || this.getCol() === -1 || this.getRow() === this.parent.getSize()) {
            killTween = this.kill();
            return killTween.start();
          }
        }
      }, this);
      if (neighbourTween !== void 0) {
        if (direction !== Panel.moveDirections.DOWN) {
          neighbourTween.onStart.add(function() {
            return tween.start();
          }, this);
          return neighbourTween;
        } else {
          tween.onStart.add(function() {
            return neighbourTween.start();
          }, this);
          return tween;
        }
      } else {
        return tween;
      }
    };

    Panel.prototype.kill = function() {
      var neighbour, neighbourTween, tween;
      tween = this.game.add.tween(this.scale).to({
        x: 0.001,
        y: 0.001
      }, 300, Phaser.Easing.Quadratic.Out, false, 0, false);
      neighbour = this.getNeighbour(Panel.moveDirections.TOP);
      tween.onComplete.add(function() {
        return this.parent.remove(this, true);
      }, this);
      if (neighbour !== null) {
        neighbourTween = neighbour.slide(Panel.moveDirections.DOWN);
        tween.onStart.add(function() {
          return neighbourTween.start();
        }, this);
      }
      return tween;
    };

    Panel.prototype.getNeighbour = function(position) {
      var result;
      if (!position in Panel.moveDirections) {
        throw new Error("Please parse a Panel.moveDirection");
      } else if (this.parent === null || this.parent === void 0) {
        console.log("Get getNeighbour from panel without parent ", this.getRow(), this.getCol());
        return null;
      }
      result = null;
      switch (position) {
        case Panel.moveDirections.DOWN:
          result = this.parent.getPanel(this.getRow() + 1, this.getCol());
          break;
        case Panel.moveDirections.RIGHT:
          result = this.parent.getPanel(this.getRow(), this.getCol() + 1);
          break;
        case Panel.moveDirections.LEFT:
          result = this.parent.getPanel(this.getRow(), this.getCol() - 1);
          break;
        case Panel.moveDirections.TOP:
          result = this.parent.getPanel(this.getRow() - 1, this.getCol());
      }
      return result;
    };

    Panel.prototype.setRow = function(row) {
      return this._SAS_row = row;
    };

    Panel.prototype.setCol = function(col) {
      return this._SAS_col = col;
    };

    Panel.prototype.getRow = function() {
      return this._SAS_row;
    };

    Panel.prototype.getCol = function() {
      return this._SAS_col;
    };

    Panel.prototype.setType = function(type) {
      return this._SAS_type = type;
    };

    Panel.prototype.getType = function() {
      return this._SAS_type;
    };

    return Panel;

  })(Phaser.Group);
});

//# sourceMappingURL=data:application/json;base64,
