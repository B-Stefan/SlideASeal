var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

define(['Phaser', './Seal', './Player'], function(Phaser, Seal, Player) {
  var SealBoard;
  return SealBoard = (function(_super) {
    __extends(SealBoard, _super);

    SealBoard.preload = function(game) {};

    function SealBoard(game, side) {
      this.getSide = __bind(this.getSide, this);
      this.getNumberOfSeals = __bind(this.getNumberOfSeals, this);
      this.changeSealSide = __bind(this.changeSealSide, this);
      this.add = __bind(this.add, this);
      this.getRandomSeal = __bind(this.getRandomSeal, this);
      this.create = __bind(this.create, this);
      this.playRandomAnimation = __bind(this.playRandomAnimation, this);
      this.setPosition = __bind(this.setPosition, this);
      this.startAnimationLoop = __bind(this.startAnimationLoop, this);
      this.show = __bind(this.show, this);
      if (!side in Seal.sides) {
        throw new Error("Pleas parse a Sealboard.position as position");
      }
      SealBoard.__super__.constructor.call(this, game, null, 'SealBoard', false, false);
      if (side === Seal.sides.LEFT) {
        this.x = -100;
      } else if (side === Seal.sides.RIGHT) {
        this.x = this.game.world.width / 2 - 100;
      }
      this.y = this.game.world.height;
      this.side = side;
      this.create();
      this.create();
      this.create();
    }

    SealBoard.prototype.show = function() {
      var lastTween, oldX, oldY, seal, _i, _len, _ref;
      this.game.add.existing(this);
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        seal = _ref[_i];
        oldX = seal.x;
        oldY = seal.y;
        if (this.side === Seal.sides.LEFT) {
          seal.x = -200;
        } else if (this.side === Seal.sides.RIGHT) {
          seal.x = this.game.world.width - this.x + 100;
        }
        lastTween = this.game.add.tween(seal).to({
          x: oldX,
          y: oldY
        }, 1000, Phaser.Easing.Quadratic.Out, true, Math.random() * 1000);
        seal.setShow(true);
      }
      return lastTween.onComplete.add(function() {
        return this.startAnimationLoop();
      }, this);
    };

    SealBoard.prototype.startAnimationLoop = function(delayInSeconds) {
      if (delayInSeconds == null) {
        delayInSeconds = 4;
      }
      return this.game.time.events.loop(Phaser.Timer.SECOND * delayInSeconds, function() {
        var seal;
        if (Math.random() > 0.5) {
          seal = this.getRandomSeal();
          if (seal !== null && seal !== void 0) {
            return seal.playRandomAnimation();
          }
        } else {
          return this.playRandomAnimation();
        }
      }, this);
    };

    SealBoard.prototype.setPosition = function(side) {
      if (!side in Player.sides) {
        throw new Error("Please parse a side enum type");
      }
    };

    SealBoard.prototype.playRandomAnimation = function() {
      var seal, _i, _len, _ref, _results;
      _ref = this.children;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        seal = _ref[_i];
        _results.push(this.game.time.events.add(Phaser.Timer.SECOND * Math.random(), function() {
          if (Math.random() > 0.5) {
            seal.playRandomSound();
          }
          return seal.playRandomAnimation();
        }, this));
      }
      return _results;
    };

    SealBoard.prototype.create = function(x, y) {
      var seal;
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      seal = new Seal(this.game, this, x, y, this.side);
      return this.add(seal);
    };

    SealBoard.prototype.getRandomSeal = function() {
      return this.children[Math.floor(Math.random() * this.children.length)];
    };

    SealBoard.prototype.add = function(newSeal, randomPostion) {
      if (randomPostion == null) {
        randomPostion = true;
      }
      if (!(newSeal instanceof Seal)) {
        throw new Error("Pleas parse a Seal instnace ");
      }
      if (randomPostion === true) {
        newSeal.setRandomPosition(this.children[this.children.length - 1]);
      }
      return SealBoard.__super__.add.call(this, newSeal);
    };

    SealBoard.prototype.changeSealSide = function(numberOfSealsToChange, sealBoardToAdd) {
      var i, lastTween, randomSeal, seal, sealsToChange, _i, _len;
      i = 0;
      sealsToChange = [];
      while (i !== numberOfSealsToChange) {
        randomSeal = this.getRandomSeal();
        if (randomSeal === null || randomSeal === void 0) {
          break;
        } else {
          sealsToChange.push(randomSeal);
        }
        i = i + 1;
      }
      for (_i = 0, _len = sealsToChange.length; _i < _len; _i++) {
        seal = sealsToChange[_i];
        lastTween = seal.changeSide(sealBoardToAdd);
      }
      return lastTween;
    };

    SealBoard.prototype.getNumberOfSeals = function() {
      return this.children.length;
    };

    SealBoard.prototype.getSide = function() {
      return this.side;
    };

    return SealBoard;

  })(Phaser.Group);
});

//# sourceMappingURL=data:application/json;base64,
